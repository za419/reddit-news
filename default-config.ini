# Default configuration options
# Overriden by options set in config.ini (untracked by git, does not need to exist)
# These options should be set in the same [DEFAULT] section.

[DEFAULT]
# Logging configuration

# Levels as set by Python
# The value may either be one of these integers, or one of these strings:
#   CRITICAL = 50
#   ERROR    = 40
#   WARNING  = 30
#   INFO     = 20
#   DEBUG    = 10
#   VERBOSE  = 5
#
# Note that VERBOSE logging includes information about socket selection.
# Depending on the value of select_timeout (far below), this could result in extremely large logs very quickly.
# Use with caution.
#
# Log entries at or above the set level are emitted (both to disk and to the console, if enabled)
# Log entries below the set level are ignored
loglevel = INFO

# Logging format
# See https://docs.python.org/3/library/logging.html#logging.Formatter for documentation
# The default format appears like:
# [2018-07-28 21:29:24.180] INFO Accepting a new connection.
logformat = [%(asctime)s] <%(threadName)s> %(levelname)s %(message)s

# For convenience, these options allow a second debugging format to be used.
# This doesn't have any real effect on the server, but it makes it easier for server admins to switch between formats
# Therefore. If log_use_debugformat is on, the debug format will be used, else the normal one
# By default, the normal logformat is more human readable, while the debug one is a more machine-parsable format, with some extra data (which isn't included in the normal log to limit line length).
log_use_debugformat = off
log_debugformat = %(created)f|%(relativeCreated)d|%(threadName)s|%(levelname)s|%(message)s|%(filename)s|%(funcName)s|%(lineno)d

# By default, Python formats milliseconds with a comma (IE 2018-07-28 21:29:24,180).
# If this option is 'on', the server will forcibly set this to use a decimal point, as is customary in the US.
log_milliseconds_with_period = on

# These two options control logging to either the console or the disk
# At least one must be enabled to emit logs.
# If both are disabled, then the used logger will be configured so that no log entry can be emitted,
#   and logs will be configured to be sent to stdout.
log_to_console = on
log_to_disk = on

# If log_to_console is enabled, this option sets the stream to which logging is written.
# Can either be 'stdout' or 'stderr'
logstream = stderr


# If log_to_disk is enabled, these options set the location to which logs are written
# Logs are written to a rotating file: The configured file is current.
# The log file has the date appended to it (as an extension), and the configured file is emptied
# This can be any of S, M, H or D, for seconds, minutes, hours, and days.
log_rotation_interval = D

# The log is rotated out every this many of the configured interval
# IE, by default, the log is rotated out every day
log_rotation_period = 1

# This many old logs are kept
# IE by default up to 30 old log files are kept
log_backup_count = 30

# Directory is relative to the directory in which server.py is kept.
# A word of caution: The default directory is ignored by git. Other directories may not be.
# Be careful to avoid tracking logs in git.
logdirectory = logs

# File is the name of the current log within the configured directory.
logfile = server

# This parameter provides the name of the logger used by the server.
# I've never noticed any change caused by changing it, but perhaps if you want to include it in the format string or something, this could come in handy.
logger = logger

# This parameter controls whether exceptions raised during logging can crash the server
# If this is on, the logging module won't handle any exceptions that occur while generating a log
# If this is off, the logging module will silently absorb any such exception.
# I recommend leaving this off in production (to avoid crashes and service interruptions),
#   but turning this on in development to try to handle such exceptions while it doesn't matter.
log_raise_exceptions = off

# This controls whether uncaught exceptions are logged.
# I can't imagine why you wouldn't want to leave this on, but hey, what do I know.
log_uncaught = on

# This controls whether the server attempts to return to normal control flow after an uncaught exception.
# This should be enabled in production (for uptime purposes), but disabled in development (to resolve issues).
# This option is only honored if log_uncaught is on. If off, behavior on uncaught exceptions are left to the environment (which usually simply closes the program)
# This option is not honored for subclasses of KeyboardInterrupt, which always end the program (when uncaught).
suppress_uncaught = on


# Server management configuration

# Default duration browsers are told to cache resources for (if not specified on commandline)
# Duration is in seconds
default_caching_duration = 3600

# If set, forces caching to be enabled regardless of the commandline used.
# If the commandline specifies a caching duration, it will be used regardless.
# If it doesn't specify caching, but this option is set, the default caching duration (above) will be used.
force_caching = off

# Any address on this list will be prevented from establishing a connection to the server.
# Specifically, these addresses will immediately have connections closed.
# This should be a comma-delimited list of addresses, with no other formatting (except whitespace).
# If newlines are included, indent the lines which are still part of the list (not beyond the equal sign).
# If this is set to "None", no addresses will be blacklisted
connection_blacklist = None
# Example valid configuration:
# connection_blacklist = 127.0.0.1, 192.168.0.1, 8.8.8.8
# Example valid multiline configuration:
# connection_blacklist = 127.0.0.1,
#                  192.168.0.1,
#                  8.8.8.8

# This message will be sent verbatim to blacklisted clients before the connection is dropped.
# If none, no message will be sent.
blacklist_response = None

# If this is not set to "None", this header is used to identify clients
# (Useful if behind a proxy, to set to a proxy-delivered header with the client's IP)
# If the header is not found, the default behavior (using the socket peer address) will be used.
# Two headers are processed with special behavior:
#   X-Forwarded-For is stripped for the leftmost IP address (the original client; ignoring in-between proxies)
#   Forwarded is parsed for the first address identified by a "for".
# Any other header is treated as if the entire header value is the client identifier
client_identification_header = None
# Example (Generally compatible server):
# client_identification_header = X-Forwarded-For
# Example (Strictly standards-compliant server):
# client_identification_header = Forwarded
# Example (Cloudflare):
# client_identification_header = CF-Connecting-IP

# If set, the server will respond to files that are not found that end in 'coffee' with '418 I'm a Teapot'
# If off, these requests will just get a 404 like any other such request.
# Therefore, I consider this a harmless easter egg.
enable_418 = on

 # If set, the server will respond to files that are not found, where the filename matches moo_regex, with a random ASCii-art cow (see cows.py)
# If off, these requests will just get a 404 like any other such request.
# Therefore, I consider this a harmless easter egg.
enable_cows = on
 # Regex for cow egg. If this regex is a full match for the file path, and the file is not found, then the cow egg is triggered
# 418 takes precedence over this - If set to .*, then the egg will be triggered for all 404 responses.
# By default, matches any request where the whole filename is "moo" (with any level of directory nesting and any single file extension, including none)
moo_regex = .*(\\|\/)moo(\.[^.]*)?
 # If set, the server will return "200 OK" for cows (treating cows as an acceptable page).
# If off, the server will return "404 Not Found) for cows (treating cows as a special case of the error page).
cows_ok = off

# If set, the server will check POST requests.
# Otherwise, 405 Method Not Allowed will be returned, informing the client that they may only use GET or HEAD at that location.
# If off, POSTs are treated just like any other unknown method, and will be met with 501 Not Implemented
# Basically, this option is an on/off switch for the entire backend API
# (Disabling this will break data processing. Do so with caution.)
enable_post = on

# Controls the blocksize (in bytes) HTTP requests are done in
# Smaller chunks have less overhead. Larger chunks result in larger latency before the beginning of a request or response can be processed
# Note that small chunks will cause the server to 'hang' while processing requests, as the receive loop will repeat many times
# Also note that there is a known bug wherein very small chunks (less than the mid-twenties) can cause the server to hang permanently or crash.
# This is because the current code depends on the entire Content-Length header being fetched in one block.
# If this condition is not met, the server will miss the header entirely, causing it to try to find it forever (unless the connection is disconnected).
# Python docs recommend 4096 as this size.
# In any case, it should be a power-of-two. Some servers use 8192 or even 16384.
HTTP_blocksize = 4096

# Controls the maximum number of connections in the connection accept backlog
# Python will allow this many connections to be waiting to be accepted before dropping them
# Generally, we should keep this fairly small - If the server can't keep up with incoming connections, it's better to drop connections than leave them waiting for a long timeouts
# However, if the server consistently drops connections, you should increase the backlog.
backlog = 5

# Comma-separated list of headers (with values) which will be added to all responses.
# For formatting of the list, see the comments for special_request_whitelist
# For formatting of an HTTP header, see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
# Regardless of configuration, the server transmits the following headers:
#   Date, Connection, Content-Type, Content-Length, Accept-Ranges
# As well as, conditionally:
#   Warning, Retry-After, X-Queue-Position, Allow, Location
# If caching is enabled (via commandline or configuration), these headers are also sent:
#   Cache-Control, ETag, Last-Modified
# I'm not sure what happens if you send a duplicate header. It's probably client dependent.
# I recommend not sending those headers. Your configuration will very likely misbehave.
additional_headers = Server: Reddit-News server,
                Tk: N

# If this is off, byte-range requests will be disabled.
# The server will explicitly tell clients it doesn't support them.
# Doing this will prevent these requests from being used to resume downloads of large files, potentially increasing overhead.
# However, if the requests are never used or should never be used, then turning this off will slightly increase server performance.
enable_range_requests = on

# This option controls threading
# The server will spawn up to this many threads per operation, per selection
# That is to say, each time the server decides to do work on some sockets, it will spawn up to this many threads to read with, and up to this many threads to write with
# Which is also to say, the maximum number of threads is twice this number
# If this is too high, the overhead of creating threads could slow the serrver down more than the parallelism is a benefit
# If this is 0, the server will handle all the connections serially, each connection one after another
# Probably, the number of cores your machine has is a fair start point for this setting
max_threads = 4

# These options control content encoding
# The server itself manages how encoding is done, but when it's done is configurable.
# First, the server will only compress files above this many bytes in size
# 1460 bytes is how much data can be sent in one Ethernet frame (one MTU, after TCP/IP overhead)
# Compressing things smaller than this is basically a waste
minimum_compress_size = 1460
# Only files with a MIME type that matches this regex will be compressed
compress_type_regex = (text/.*|application/json|application/javascript|application/xml|application/.+\+xml|application/x-font-.+|image/svg\+xml|image/x-icon|image/vnd.microsoft.icon|font/.*)

# This option controls the select timeout
# Basically, if no sockets are available for read within this many seconds (can be a float), the select is aborted.
# Instead, the program will automatically return to assemble a new set of selectable connections
# Lowering this setting increases overhead (since the old set is recreated), but increases responsiveness for connections added asynchronously to selects.
# Raising this setting lowers overhead, but causes some connections to have to wait longer than needed.
# This can be set to None to disable timeouts, but this causes such connections to wait until another connection is ready and processed to be handled.
select_timeout = 0.25

# Controls whether the server waits for reads to finish before proceeding to selection
# When this is enabled, the server will wait for all reads to finish before selection
# This means that the waiting writes are handled immediately, rather than waiting
# However, it also means that waiting reads have to wait even longer before being processed
# Basically, enabling this trades higher maximum wait time for writes for lower expected wait time for reads
# That is, higher throughput and latency under high stress conditions
# Note that the benefit is technically unbounded (if a read were to take infinite time, this allows the server to continue instead of hanging),
#   while the cost is bounded by the value of select_timeout (by default, the maximum extra time a write can be forced to wait is one second)
# Therefore, I recommend leaving this off unless your users are having latency problems or you use high or None select_timeout
block_on_read = off
